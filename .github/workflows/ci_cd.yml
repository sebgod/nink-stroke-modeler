name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BAZEL_VERSION: 7.3.0
  VERSION_PREFIX: 1.0.${{ github.run_number }}
  VERSION_REV: ${{ github.run_attempt }}
  VERSION_SUFFIX: +${{ github.sha }}
  BUILD_CONF: Release

jobs:
  build-win:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
  
    - name: Download bazel installer
      shell: bash
      run: curl -OL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-windows-x86_64.exe

    - name: Install bazel
      shell: bash
      run: ./bazel-${BAZEL_VERSION}-windows-x86_64.exe

    - name: Bazel build all (x64)
      run: bazel build --config=vs2022 --cpu=x64_windows //:all

    - name: Upload libnink.* (x64)
      uses: actions/upload-artifact@v4
      with:
        name: Windows-nink-x64
        path: bazel-bin/*.dll

  build-linux-x64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install required deps
      run: sudo apt-get install g++ unzip zip curl

    - name: Download bazel installer
      run: curl -OL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh

    - name: Install bazel
      run: chmod +x bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && sudo ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh && rm bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh

    - name: Bazel build all
      run: bazel build --config=gcc //:all

    - name: Upload libnink.* (x64)
      uses: actions/upload-artifact@v4
      with:
        name: Linux-nink-x64
        path: bazel-bin/*.so
          
  build-nuget:
    runs-on: ubuntu-latest

    needs: [build-win, build-linux-x64]

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: bazel-bin
        merge-multiple: false

    - name: List artifacts
      run: ls -rla bazel-bin/

    - name: Pack nuget
      run: dotnet pack --version-suffix $VERSION_SUFFIX -p:VersionPrefix=${VERSION_PREFIX}${VERSION_REV} -p:FileVersion=${VERSION_PREFIX}.${VERSION_REV} -p:ContinuousIntegrationBuild=true

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: '**/*.nupkg'
        retention-days: 5
  
  publish-nuget:
    runs-on: ubuntu-latest

    needs: [build-nuget]

    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: nuget-packages
        merge-multiple: true
      
    - name: Publish NuGet packages
      run: dotnet nuget push **/*.nupkg -s nuget.org -k ${{ secrets.NUGET_API_KEY }} 
  